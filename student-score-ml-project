from google.colab import files
uploaded = files.upload()

import pandas as pd
from IPython.display import display
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.svm import SVR, SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.cluster import KMeans
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, silhouette_score
import numpy as np


df = pd.read_csv('students.csv')
display(df.head())


missing = df.isnull().mean() * 100
drop_cols = missing[missing > 50].index
df.drop(drop_cols, axis=1, inplace=True)


num_cols = df.select_dtypes(include=['int64', 'float64']).columns
cat_cols = df.select_dtypes(include=['object']).columns


df[num_cols] = SimpleImputer(strategy='median').fit_transform(df[num_cols])
df[cat_cols] = SimpleImputer(strategy='most_frequent').fit_transform(df[cat_cols])


df = pd.get_dummies(df, drop_first=True)

df['average_score'] = df[['math score', 'reading score', 'writing score']].mean(axis=1)
X = df.drop(['average_score'], axis=1)
y_reg = df['average_score']
y_clf = (y_reg > y_reg.median()).astype(int)



X_train_r, X_test_r, y_train_r, y_test_r = train_test_split(X, y_reg, test_size=0.2, random_state=42)
X_train_c, X_test_c, y_train_c, y_test_c = train_test_split(X, y_clf, test_size=0.2, random_state=42)


scaler_r = StandardScaler()
X_train_r_scaled = scaler_r.fit_transform(X_train_r)
X_test_r_scaled = scaler_r.transform(X_test_r)

scaler_c = StandardScaler()
X_train_c_scaled = scaler_c.fit_transform(X_train_c)
X_test_c_scaled = scaler_c.transform(X_test_c)


reg_models = {
    'KNN': KNeighborsRegressor(),
    'LinearRegression': LinearRegression(),
    'DecisionTree': DecisionTreeRegressor(),
    'RandomForest': RandomForestRegressor(),
    'SVR': SVR()
}

reg_results = []
threshold = 0.10

for name, model in reg_models.items():
    model.fit(X_train_r_scaled, y_train_r)
    preds = model.predict(X_test_r_scaled)
    rel_err = np.abs(preds - y_test_r) / y_test_r
    percent_within = (rel_err <= threshold).mean() * 100
    reg_results.append({'Algorithm': name, 'Accuracy': percent_within})

reg_df = pd.DataFrame(reg_results)